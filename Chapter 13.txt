const obj = {
  message : "discover"
}

obj.message; //"discover"

//-----------------------

const french = {};
french["Thank you"] = "Merci";

french["Thank you"]; //"Merci"

//-----------------------

const obj = {};

//Number as key
obj[1] = "Number 1";
obj[1] === obj['1']; //true

//Object as key
const number1 = {
  toString : function() {return '1';}
}
obj[number1] === obj['1']; //true

//-----------------------

const book = {
  title : "How JavaScript Works",
  author : {
    firstName : "Douglas",
    lastName : "Crockford"
  }
}

//-----------------------

const app = {};

app.authorGateway = { 
  getAuthors : function() {} 
};

app.bookGateway = { 
  getBooks : function() {} 
};

//-----------------------

const timer = {
  secret: 0,
  start : function() {},
  stop : function() {},
}

timer.secret; //0
timer.start = function() { 
  console.log("don't start");
}
timer.start(); //"don't start"

//-----------------------

const timerPrototype = {
  start : function() {},
  stop : function() {}
};

const timer = Object.create(timerPrototype);
timer.__proto__ === timerPrototype; //true

//-----------------------

const timerPrototype = Object.freeze({
  start : function() {},
  stop : function() {}
});

const timer = Object.create(timerPrototype);
timer.start = function() { 
  console.log("don't start"); 
}

//-----------------------

function Timer(){
  this.secret = 0;
}

Timer.prototype = {
  start : function() {},
  stop : function() {}
}

const timer = new Timer();
timer.start();

//-----------------------

function newTimer(){
  let newObj = Object.create(Timer.prototype);
  let returnObj = Timer.call(newObj, arguments);
  if(returnObj) return returnObj;
    
  return newObj;
}

//-----------------------

class Timer{
  constructor(){
    this.secret = 0;
  }
  
  start() {}
  stop() {}  
}

const timer = new Timer();
timer.__proto__ === Timer.prototype;

//-----------------------

function logProperty(name){
  console.log(name); //property name
  console.log(obj[name]); //value
}

Object.keys(obj).forEach(logProperty);