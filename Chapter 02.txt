let x = 1;
{ 
  let x = 2;
}
console.log(x); //1

//----------------

var x = 1;
{ 
  var x = 2;
}
console.log(x); //2

//----------------

//module "./TodoStore.js"
export default function TodoStore(){}

//module "./UserStore.js"
export default function UserStore(){}


//module "./main.js"
import TodoStore from "./TodoStore";
import UserStore from "./UserStore";
const todoStore = TodoStore();
const userStore = UserStore();

//----------------

//module "./tools.js"
export function compose(...args){}
export function decorate(f, ...args){}


//module "./main.js"
import { compose, decorate } from "./tools";

//----------------

const numbers = [1, 2, 3];
const arr = ['a', 'b', 'c', ...numbers];

console.log(arr);
//["a", "b", "c", 1, 2, 3]

//----------------

function process(x,y, ...arr){
  console.log(arr)
}

process(1, 2, 3, 4, 5);
//[3, 4, 5]

function processArray(...arr){
  console.log(arr)
}

processArray(1, 2, 3, 4, 5);
//[1, 2, 3, 4, 5]

//----------------

const book = { title: "JavaScript: The Good Parts" };

//clone with Object.assign()
const clone = Object.assign({}, book);

//clone with spread operator
const clone = { ...book };

const arr = [1, 2 ,3];

//clone with slice
const cloneArr = arr.slice();

//clone with spread operator
const cloneArr = [ ...arr ];

//----------------

const part1 = [1, 2, 3];
const part2 = [4, 5, 6];

const arr = part1.concat(part2);
const arr = [...part1, ...part2];

console.log(arr);
//[1, 2, 3, 4, 5, 6]

//----------------

const authorGateway = { 
  getAuthors: function() {},
  editAuthor: function() {}
};

const bookGateway = { 
  getBooks: function() {},
  editBook: function() {}
};

//copy with Object.assign()
const gateway = Object.assign({},
      authorGateway, 
      bookGateway);
      
//copy with spread operator
const gateway = {
   ...authorGateway,
   ...bookGateway
};

//----------------

function logAll(...args){
  console.log(args);
}

logAll("msg1", "msg2", "msg3");
//["msg1", "msg2", "msg3"]

//----------------

function BookGateway(){
  function getBooks() {}
  function editBook() {}
  
  return {
    getBooks: getBooks,
    editBook: editBook
  }
}


function BookGateway(){
  function getBooks() {}
  function editBook() {}
  
  return {
    getBooks,
    editBook
  }
}

//----------------

const todoStore = TodoStore();
const userStore = UserStore();
    
const stores = {
  todoStore,
  userStore
};

//----------------

function TodoStore(args){
  const helper = args.helper;
  const dataAccess = args.dataAccess;
  const userStore = args.userStore;
}


function TodoStore(args){
  const { 
    helper, 
    dataAccess, 
    userStore } = args;
}


function TodoStore({helper, dataAccess, userStore}){}


TodoStore({ 
  helper: {}, 
  dataAccess: {}, 
  userStore: {} 
});

//----------------

function log(message, mode = "Info"){
  console.log(mode + ": " + message);
}

log("An info");
//Info: An info

log("An error", "Error");
//Error: An error

//----------------

function createTodoItemHtml(todo){
  return `<li>
    <div>${todo.title}</div>
    <div>${todo.userName}</div>
  </li>`;
}

//----------------

class Service {
  doSomething(){ 
    console.log("do-something"); 
  }
}

const service = new Service();
console.log(service.__proto__ === Service.prototype);

//----------------

class Service {
  doSomething(){ 
    console.log("do-something"); 
  }
}

class SpecialService extends Service {
  doSomethingElse(){ 
    console.log("do-something-else"); 
  }  
}

const specialService = new SpecialService();
specialService.doSomething();
specialService.doSomethingElse();

//----------------

const todos = [
  {id: 1, title: "learn", type:"NC", completed: false},
  {id: 2, title: "connect", type:"RC", completed: true}
];

const titles = todos.map(todo => todo.title);
//["learn", "connect"]


const filteredTodos = todos.filter(todo => !todo.completed);
//{id: 1, title: "learn", type: "NC", completed: false}

//----------------

function isNewContent(todo){
   return todo.type === "NC";
}

const isNewContent = todo => todo.type === "NC";

//----------------

this.message = "help";

const logMessage = ()=>{ 
  console.log(this.message); 
}

logMessage(); //"help"
logMessage.call({message : "identify"}); //"help"

//----------------

function print(from, to) 
{ 
  const n = from;
  if (n > to)  return;

  console.log(n);

//last statement is the recursive call 
  print(n + 1, to); 
}

print(1, 3);
//1
//2
//3

//----------------

function delay(duration) {
  return new Promise(function(resolve, reject){
    setTimeout(resolve, duration);
  });
}

function logMessage(){
  console.log("process ended");
}

delay(5000)
 .then(logMessage);

//---------------- 
 
function fetchUsers() { 
  return fetch("/users"); 
}
function doSomething(){ }
function handleError(error){ }


fetchUsers()
  .then(doSomething)
  .catch(handleError);